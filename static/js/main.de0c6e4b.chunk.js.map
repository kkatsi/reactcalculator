{"version":3,"sources":["Screen.js","Button.js","App.js","index.js"],"names":["Screen","React","Component","render","className","this","props","scrValue","Button","value","text","onClick","flag","nums","Array","from","keys","reverse","symbset","operators","operations","a","b","String","substring","App","constructor","super","state","checklength","e","target","length","setState","checkString","test","replacesymbol","symb","slice","filter","operator","includes","Number","split","updateScreen","reduce","Math","sqrt","map","num","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.de0c6e4b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./styles.css\";\r\n\r\nclass Screen extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Screen\">\r\n        <span>{this.props.scrValue}</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Screen;\r\n","import React, { Component } from \"react\";\r\nimport \"./styles.css\";\r\n\r\nclass Button extends React.Component {\r\n  render() {\r\n    return (\r\n      <button\r\n        className=\"Button\"\r\n        value={this.props.text}\r\n        onClick={this.props.onClick}\r\n      >\r\n        {this.props.text}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Button;\r\n","import React from \"react\";\nimport Screen from \"./Screen\";\nimport Button from \"./Button\";\nimport \"./styles.css\";\n\nlet flag = false;\nconst nums = Array.from(Array(10).keys()).reverse();\nconst symbset = [\"=\", \".\", \"-\", \"+\", \"*\", \"/\", \"%\", \"√\"].reverse();\n\nconst operators = [\"+\", \"-\", \"*\", \"/\"];\n//create 'operations' so operators and their functions can exists as variables\nconst operations = {\n  \"+\": function(a, b) {\n    return String(a + b);\n  },\n  \"-\": function(a, b) {\n    return String(a - b);\n  },\n  \"*\": function(a, b) {\n    return String(a * b).substring(0, 10);\n  },\n  \"/\": function(a, b) {\n    return String(a / b).substring(0, 10);\n  }\n};\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      scrValue: \"0\"\n    };\n  }\n\n  checklength(e) {\n    if ((this.state.scrValue + e.target.value).length > 10)\n      this.setState({\n        scrValue: this.state.scrValue.substring(0, 10)\n      });\n  }\n\n  //tests if a string contains only integer of float numbers\n  checkString(value) {\n    if (/^\\d+\\.\\d+$/.test(value) || /^\\d+$/.test(value)) return true;\n    else return false;\n  }\n\n  //manipulates the situation when 2 operators goes together in the screen.\n  replacesymbol(symb) {\n    // if there is an operator at the end of the string and the rest is a number,\n    // then the prexisted operator is replaced by the new operator clicked by user.\n    if (this.checkString(this.state.scrValue.slice(0, -1)))\n      this.setState({\n        scrValue: this.state.scrValue.slice(0, -1) + symb\n      });\n    //one comes in. The first in place operation completes and the sybmol of the\n    //new operation is added at the end of the result. //else means that there is already an operator between 2 numbers in the screen and a second\n    else {\n      this.setState({\n        scrValue:\n          //operations object has every possible operation, so we specify the operator\n          //by filtering operators array with the operator that is already included in\n          //the screen string and the 2 numbers needed for the operation are being given\n          operations[ //getting the operator that exist in the string\n            operators.filter(operator => this.state.scrValue.includes(operator))\n          ](\n            //transform string to number\n            Number(\n              //getting the first part of the string, the one before operator\n              this.state.scrValue.split(\n                operators.filter(operator =>\n                  this.state.scrValue.includes(operator)\n                )\n              )[0]\n            ),\n            //transform string to number\n            Number(\n              //getting the second part of the string, the one after operator\n              this.state.scrValue.split(\n                operators.filter(operator =>\n                  this.state.scrValue.includes(operator)\n                )\n              )[1]\n            )\n          ) + symb //adding the symbol of the new operation at the end\n      });\n    }\n  }\n\n  updateScreen(e) {\n    switch (e.target.value) {\n      case \"C\": {\n        this.setState({\n          scrValue: \"0\"\n        });\n        break;\n      }\n      case \"←\": {\n        //check the length of screen value\n        if (this.state.scrValue.length > 1)\n          this.setState({\n            scrValue: this.state.scrValue.slice(0, -1),\n            symb: null\n          });\n        else\n          this.setState({\n            scrValue: \"0\"\n          });\n        break;\n      }\n      case \".\": {\n        if (this.checkString(Number(this.state.scrValue + e.target.value)))\n          this.setState({\n            scrValue: this.state.scrValue + \".\"\n          });\n        else if (\n          this.checkString(this.state.scrValue.slice(0, -1)) &&\n          !this.state.scrValue.includes(\".\")\n        )\n          this.setState({ scrValue: this.state.scrValue.slice(0, -1) + \".\" });\n        else if (\n          operators.filter(operator =>\n            this.state.scrValue.includes(operator)\n          ) != \"\" &&\n          this.state.scrValue.split(\n            operators.filter(operator => this.state.scrValue.includes(operator))\n          )[1].length > 0 &&\n          this.checkString(\n            Number(\n              this.state.scrValue.split(\n                operators.filter(operator =>\n                  this.state.scrValue.includes(operator)\n                )\n              )[1] + e.target.value\n            )\n          )\n        )\n          this.setState({\n            scrValue: this.state.scrValue + \".\"\n          });\n        break;\n      }\n      case \"+\": {\n        if (this.state.scrValue.includes(\"+\"))\n          this.setState({\n            scrValue:\n              this.state.scrValue\n                .split(\"+\")\n                .reduce((a, b) => Number(a) + Number(b)) + \"+\"\n          });\n        if (this.checkString(this.state.scrValue))\n          this.setState({\n            scrValue: this.state.scrValue + e.target.value\n          });\n        else this.replacesymbol(\"+\");\n        break;\n      }\n      case \"-\": {\n        if (this.state.scrValue.includes(\"-\"))\n          this.setState({\n            scrValue:\n              this.state.scrValue\n                .split(\"-\")\n                .reduce((a, b) => Number(a) - Number(b)) + \"-\"\n          });\n        if (this.checkString(this.state.scrValue))\n          this.setState({\n            scrValue: this.state.scrValue + e.target.value\n          });\n        else this.replacesymbol(\"-\");\n        break;\n      }\n      case \"*\": {\n        if (\n          this.state.scrValue.includes(\"*\") &&\n          this.state.scrValue.split(\"*\")[1] !== \"\"\n        )\n          this.setState({\n            scrValue:\n              this.state.scrValue\n                .split(\"*\")\n                .reduce((a, b) => Number(a) * Number(b)) + \"*\"\n          });\n        if (this.checkString(this.state.scrValue))\n          this.setState({\n            scrValue: this.state.scrValue + e.target.value\n          });\n        else this.replacesymbol(\"*\");\n        break;\n      }\n      case \"/\": {\n        if (\n          this.state.scrValue.includes(\"/\") &&\n          this.state.scrValue.split(\"/\")[1] !== \"\"\n        )\n          this.setState({\n            scrValue:\n              this.state.scrValue\n                .split(\"/\")\n                .reduce((a, b) => Number(a) / Number(b)) + \"/\"\n          });\n        if (this.checkString(this.state.scrValue))\n          this.setState({\n            scrValue: this.state.scrValue + e.target.value\n          });\n        else this.replacesymbol(\"/\");\n        break;\n      }\n      case \"√\": {\n        if (this.checkString(this.state.scrValue))\n          this.setState({\n            scrValue: String(Math.sqrt(this.state.scrValue)).substring(0, 10)\n          });\n        else if (this.checkString(this.state.scrValue.slice(0, -1)))\n          this.setState({\n            scrValue: String(\n              Math.sqrt(this.state.scrValue.slice(0, -1))\n            ).substring(0, 10)\n          });\n        else\n          this.setState({\n            scrValue:\n              this.state.scrValue.split(\n                operators.filter(operator =>\n                  this.state.scrValue.includes(operator)\n                )\n              )[0] +\n              operators.filter(operator =>\n                this.state.scrValue.includes(operator)\n              ) +\n              String(\n                Math.sqrt(\n                  this.state.scrValue.split(\n                    operators.filter(operator =>\n                      this.state.scrValue.includes(operator)\n                    )\n                  )[1]\n                ).substring(0, 10)\n              )\n          });\n        break;\n      }\n      case \"%\": {\n        if (this.checkString(this.state.scrValue))\n          this.setState({\n            scrValue: \"0\"\n          });\n        else if (this.checkString(this.state.scrValue.slice(0, -1)))\n          this.setState({\n            scrValue:\n              this.state.scrValue +\n              String(\n                (this.state.scrValue.slice(0, -1) *\n                  this.state.scrValue.slice(0, -1)) /\n                  100\n              ).substring(0, 6)\n          });\n        else\n          this.setState({\n            scrValue:\n              this.state.scrValue.split(\n                operators.filter(operator =>\n                  this.state.scrValue.includes(operator)\n                )\n              )[0] +\n              operators.filter(operator =>\n                this.state.scrValue.includes(operator)\n              ) +\n              String(\n                (this.state.scrValue.split(\n                  operators.filter(operator =>\n                    this.state.scrValue.includes(operator)\n                  )\n                )[0] *\n                  this.state.scrValue.split(\n                    operators.filter(operator =>\n                      this.state.scrValue.includes(operator)\n                    )\n                  )[1]) /\n                  100\n              ).substring(0, 10)\n          });\n        break;\n      }\n      case \"=\": {\n        this.checklength(e);\n        if (this.checkString(this.state.scrValue)) break;\n        if (this.state.scrValue.slice(-1) === \".\") {\n          this.setState({\n            scrValue: this.state.scrValue.slice(0, -1)\n          });\n          break;\n        }\n        if (this.checkString(this.state.scrValue.slice(0, -1)))\n          this.setState({\n            scrValue: operations[this.state.scrValue.slice(-1)](\n              Number(this.state.scrValue.slice(0, -1)),\n              Number(this.state.scrValue.slice(0, -1))\n            )\n          });\n        else this.replacesymbol(\"\");\n        flag = true;\n        break;\n      }\n      default: {\n        //check if '0' is the initial value\n\n        this.state.scrValue === \"0\" ||\n        (flag && this.checkString(this.state.scrValue))\n          ? this.setState({\n              scrValue: e.target.value\n            })\n          : this.setState({\n              scrValue: this.state.scrValue + e.target.value\n            });\n\n        flag = false;\n        this.checklength(e);\n\n        break;\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Screen scrValue={this.state.scrValue} />{\" \"}\n        <div className=\"keypad\">\n          <div className=\"clearContainer\">\n            <Button text={\"←\"} onClick={e => this.updateScreen(e)} />{\" \"}\n            <Button text={\"C\"} onClick={e => this.updateScreen(e)} />{\" \"}\n          </div>{\" \"}\n          <div className=\"numsContainer\">\n            {\" \"}\n            {nums.map(num => (\n              <Button text={num} onClick={e => this.updateScreen(e)} />\n            ))}{\" \"}\n          </div>{\" \"}\n          <div className=\"symbsetContainer\">\n            {\" \"}\n            {symbset.map(symb => (\n              <Button text={symb} onClick={e => this.updateScreen(e)} />\n            ))}{\" \"}\n          </div>{\" \"}\n        </div>{\" \"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}