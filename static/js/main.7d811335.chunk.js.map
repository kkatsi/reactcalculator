{"version":3,"sources":["Screen.js","Button.js","App.js","index.js"],"names":["Screen","React","Component","render","className","this","props","scrValue","Button","value","text","onClick","flag","nums","Array","from","keys","reverse","symbset","operators","operations","a","b","App","constructor","super","state","checklength","e","target","length","setState","substring","checkString","test","replacesymbol","symb","slice","filter","operator","includes","Number","split","updateScreen","reduce","String","Math","sqrt","map","num","rootElement","document","getElementById","ReactDOM"],"mappings":"wNAGA,MAAMA,UAAeC,IAAMC,UACzBC,SACE,OACE,yBAAKC,UAAU,UACb,8BAAOC,KAAKC,MAAMC,YAMXP,QCVf,MAAMQ,UAAeP,IAAMC,UACzBC,SACE,OACE,4BACEC,UAAU,SACVK,MAAOJ,KAAKC,MAAMI,KAClBC,QAASN,KAAKC,MAAMK,SAEnBN,KAAKC,MAAMI,OAMLF,QCZf,IAAII,GAAO,EACX,MAAMC,EAAOC,MAAMC,KAAKD,MAAM,IAAIE,QAAQC,UACpCC,EAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,UAAKD,UACnDE,EAAY,CAAC,IAAK,IAAK,IAAK,KAE5BC,EAAa,CACjB,IAAK,SAASC,EAAGC,GACf,OAAOD,EAAIC,GAEb,IAAK,SAASD,EAAGC,GACf,OAAOD,EAAIC,GAEb,IAAK,SAASD,EAAGC,GACf,OAAOD,EAAIC,GAEb,IAAK,SAASD,EAAGC,GACf,OAAOD,EAAIC,IAIf,MAAMC,UAAYtB,IAAMC,UACtBsB,cACEC,QACApB,KAAKqB,MAAQ,CACXnB,SAAU,KAIdoB,YAAYC,IACNvB,KAAKqB,MAAMnB,SAAWqB,EAAEC,OAAOpB,OAAOqB,OAAO,IAC/CzB,KAAK0B,SAAS,CAACxB,SAAUF,KAAKqB,MAAMnB,SAASyB,UAAU,EAAE,MAI7DC,YAAYxB,GACV,SAAI,aAAayB,KAAKzB,KAAU,QAAQyB,KAAKzB,IAK/C0B,cAAcC,GAGR/B,KAAK4B,YAAY5B,KAAKqB,MAAMnB,SAAS8B,MAAM,GAAI,IACjDhC,KAAK0B,SAAS,CAAExB,SAAUF,KAAKqB,MAAMnB,SAAS8B,MAAM,GAAI,GAAKD,IAK7D/B,KAAK0B,SAAS,CACZxB,SAIEa,EAEED,EAAUmB,OAAOC,GAAYlC,KAAKqB,MAAMnB,SAASiC,SAASD,KAG1DE,OAEEpC,KAAKqB,MAAMnB,SAASmC,MAClBvB,EAAUmB,OAAOC,GACflC,KAAKqB,MAAMnB,SAASiC,SAASD,KAE/B,IAGJE,OAEEpC,KAAKqB,MAAMnB,SAASmC,MAClBvB,EAAUmB,OAAOC,GACflC,KAAKqB,MAAMnB,SAASiC,SAASD,KAE/B,KAEFH,IAKZO,aAAaf,GAEX,OAAQA,EAAEC,OAAOpB,OACf,IAAK,IACHJ,KAAK0B,SAAS,CAAExB,SAAU,MAC1B,MAEF,IAAK,SAECF,KAAKqB,MAAMnB,SAASuB,OAAS,EAC/BzB,KAAK0B,SAAS,CACZxB,SAAUF,KAAKqB,MAAMnB,SAAS8B,MAAM,GAAI,GACxCD,KAAM,OAEL/B,KAAK0B,SAAS,CAAExB,SAAU,MAC/B,MAEF,IAAK,IAEDF,KAAK4B,YAAY5B,KAAKqB,MAAMnB,YAC3BF,KAAKqB,MAAMnB,SAASiC,SAAS,KAE9BnC,KAAK0B,SAAS,CAAExB,SAAUF,KAAKqB,MAAMnB,SAAW,MAEhDF,KAAK4B,YAAY5B,KAAKqB,MAAMnB,SAAS8B,MAAM,GAAI,MAC9ChC,KAAKqB,MAAMnB,SAASiC,SAAS,KAE9BnC,KAAK0B,SAAS,CAAExB,SAAUF,KAAKqB,MAAMnB,SAAS8B,MAAM,GAAI,GAAK,MAE7DhC,KAAKqB,MAAMnB,SAASmC,MAClBvB,EAAUmB,OAAOC,GAAYlC,KAAKqB,MAAMnB,SAASiC,SAASD,KAC1D,GAAGT,OAAS,IACbzB,KAAKqB,MAAMnB,SACTmC,MACCvB,EAAUmB,OAAOC,GACflC,KAAKqB,MAAMnB,SAASiC,SAASD,KAE/B,GACDC,SAAS,MAEZnC,KAAK0B,SAAS,CACZxB,SAAUF,KAAKqB,MAAMnB,SAAW,MAEpC,MAEF,IAAK,IACCF,KAAKqB,MAAMnB,SAASiC,SAAS,MAC/BnC,KAAK0B,SAAS,CACZxB,SACEF,KAAKqB,MAAMnB,SACRmC,MAAM,KACNE,OAAO,CAACvB,EAAGC,IAAMmB,OAAOpB,GAAKoB,OAAOnB,IAAM,MAE/CjB,KAAK4B,YAAY5B,KAAKqB,MAAMnB,UAC9BF,KAAK0B,SAAS,CAAExB,SAAUF,KAAKqB,MAAMnB,SAAWqB,EAAEC,OAAOpB,QACtDJ,KAAK8B,cAAc,KACxB,MAEF,IAAK,IACC9B,KAAKqB,MAAMnB,SAASiC,SAAS,MAC/BnC,KAAK0B,SAAS,CACZxB,SACEF,KAAKqB,MAAMnB,SACRmC,MAAM,KACNE,OAAO,CAACvB,EAAGC,IAAMmB,OAAOpB,GAAKoB,OAAOnB,IAAM,MAE/CjB,KAAK4B,YAAY5B,KAAKqB,MAAMnB,UAC9BF,KAAK0B,SAAS,CAAExB,SAAUF,KAAKqB,MAAMnB,SAAWqB,EAAEC,OAAOpB,QACtDJ,KAAK8B,cAAc,KACxB,MAEF,IAAK,IAED9B,KAAKqB,MAAMnB,SAASiC,SAAS,MACS,KAAtCnC,KAAKqB,MAAMnB,SAASmC,MAAM,KAAK,IAE/BrC,KAAK0B,SAAS,CACZxB,SACEF,KAAKqB,MAAMnB,SACRmC,MAAM,KACNE,OAAO,CAACvB,EAAGC,IAAMmB,OAAOpB,GAAKoB,OAAOnB,IAAM,MAE/CjB,KAAK4B,YAAY5B,KAAKqB,MAAMnB,UAC9BF,KAAK0B,SAAS,CAAExB,SAAUF,KAAKqB,MAAMnB,SAAWqB,EAAEC,OAAOpB,QACtDJ,KAAK8B,cAAc,KACxB,MAEF,IAAK,IAED9B,KAAKqB,MAAMnB,SAASiC,SAAS,MACS,KAAtCnC,KAAKqB,MAAMnB,SAASmC,MAAM,KAAK,IAE/BrC,KAAK0B,SAAS,CACZxB,SACEF,KAAKqB,MAAMnB,SACRmC,MAAM,KACNE,OAAO,CAACvB,EAAGC,IAAMmB,OAAOpB,GAAKoB,OAAOnB,IAAM,MAE/CjB,KAAK4B,YAAY5B,KAAKqB,MAAMnB,UAC9BF,KAAK0B,SAAS,CAAExB,SAAUF,KAAKqB,MAAMnB,SAAWqB,EAAEC,OAAOpB,QACtDJ,KAAK8B,cAAc,KACxB,MAEF,IAAK,SACC9B,KAAK4B,YAAY5B,KAAKqB,MAAMnB,UAC9BF,KAAK0B,SAAS,CAAExB,SAAUsC,OAAOC,KAAKC,KAAK1C,KAAKqB,MAAMnB,aAC/CF,KAAK4B,YAAY5B,KAAKqB,MAAMnB,SAAS8B,MAAM,GAAI,IACtDhC,KAAK0B,SAAS,CACZxB,SAAUsC,OAAOC,KAAKC,KAAK1C,KAAKqB,MAAMnB,SAAS8B,MAAM,GAAI,OAG3DhC,KAAK0B,SAAS,CACZxB,SACEF,KAAKqB,MAAMnB,SAASmC,MAClBvB,EAAUmB,OAAOC,GACflC,KAAKqB,MAAMnB,SAASiC,SAASD,KAE/B,GACFpB,EAAUmB,OAAOC,GACflC,KAAKqB,MAAMnB,SAASiC,SAASD,IAE/BM,OACEC,KAAKC,KACH1C,KAAKqB,MAAMnB,SAASmC,MAClBvB,EAAUmB,OAAOC,GACflC,KAAKqB,MAAMnB,SAASiC,SAASD,KAE/B,OAIZ,MAEF,IAAK,IAEClC,KAAK4B,YAAY5B,KAAKqB,MAAMnB,UAC9BF,KAAK0B,SAAS,CAAExB,SAAU,MACnBF,KAAK4B,YAAY5B,KAAKqB,MAAMnB,SAAS8B,MAAM,GAAI,IACtDhC,KAAK0B,SAAS,CACZxB,SACEF,KAAKqB,MAAMnB,SACXsC,OACGxC,KAAKqB,MAAMnB,SAAS8B,MAAM,GAAI,GAC7BhC,KAAKqB,MAAMnB,SAAS8B,MAAM,GAAI,GAC9B,OAIRhC,KAAK0B,SAAS,CACZxB,SACEF,KAAKqB,MAAMnB,SAASmC,MAClBvB,EAAUmB,OAAOC,GACflC,KAAKqB,MAAMnB,SAASiC,SAASD,KAE/B,GACFpB,EAAUmB,OAAOC,GACflC,KAAKqB,MAAMnB,SAASiC,SAASD,IAE/BM,OACGxC,KAAKqB,MAAMnB,SAASmC,MACnBvB,EAAUmB,OAAOC,GACflC,KAAKqB,MAAMnB,SAASiC,SAASD,KAE/B,GACAlC,KAAKqB,MAAMnB,SAASmC,MAClBvB,EAAUmB,OAAOC,GACflC,KAAKqB,MAAMnB,SAASiC,SAASD,KAE/B,GACF,OAGRlC,KAAKsB,YAAYC,GACnB,MAEF,IAAK,IAEH,GADAvB,KAAKsB,YAAYC,GACbvB,KAAK4B,YAAY5B,KAAKqB,MAAMnB,UAAW,MAC3C,GAAsC,MAAlCF,KAAKqB,MAAMnB,SAAS8B,OAAO,GAAY,CACzChC,KAAK0B,SAAS,CAAExB,SAAUF,KAAKqB,MAAMnB,SAAS8B,MAAM,GAAI,KACxD,MAEEhC,KAAK4B,YAAY5B,KAAKqB,MAAMnB,SAAS8B,MAAM,GAAI,IACjDhC,KAAK0B,SAAS,CACZxB,SAAUa,EAAWf,KAAKqB,MAAMnB,SAAS8B,OAAO,IAC9CI,OAAOpC,KAAKqB,MAAMnB,SAAS8B,MAAM,GAAI,IACrCI,OAAOpC,KAAKqB,MAAMnB,SAAS8B,MAAM,GAAI,OAGtChC,KAAK8B,cAAc,IACxBvB,GAAO,EACP,MAEF,QAG0B,MAAxBP,KAAKqB,MAAMnB,UACVK,GAAQP,KAAK4B,YAAY5B,KAAKqB,MAAMnB,UACjCF,KAAK0B,SAAS,CAAExB,SAAUqB,EAAEC,OAAOpB,QACnCJ,KAAK0B,SAAS,CAAExB,SAAUF,KAAKqB,MAAMnB,SAAWqB,EAAEC,OAAOpB,QAE7DG,GAAO,EACPP,KAAKsB,YAAYC,IASvBzB,SACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,CAAQG,SAAUF,KAAKqB,MAAMnB,WAC7B,yBAAKH,UAAU,kBACb,kBAAC,EAAD,CAAQM,KAAM,SAAKC,QAASiB,GAAKvB,KAAKsC,aAAaf,KACnD,kBAAC,EAAD,CAAQlB,KAAM,IAAKC,QAASiB,GAAKvB,KAAKsC,aAAaf,MAErD,yBAAKxB,UAAU,iBACZS,EAAKmC,IAAIC,GACR,kBAAC,EAAD,CAAQvC,KAAMuC,EAAKtC,QAASiB,GAAKvB,KAAKsC,aAAaf,OAGvD,yBAAKxB,UAAU,oBACZc,EAAQ8B,IAAIZ,GACX,kBAAC,EAAD,CAAQ1B,KAAM0B,EAAMzB,QAASiB,GAAKvB,KAAKsC,aAAaf,SAQjDL,QC3Tf,MAAM2B,EAAcC,SAASC,eAAe,QAC5CC,IAASlD,OAAO,kBAAC,EAAD,MAAS+C,K","file":"static/js/main.7d811335.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./styles.css\";\r\n\r\nclass Screen extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Screen\">\r\n        <span>{this.props.scrValue}</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Screen;\r\n","import React, { Component } from \"react\";\r\nimport \"./styles.css\";\r\n\r\nclass Button extends React.Component {\r\n  render() {\r\n    return (\r\n      <button\r\n        className=\"Button\"\r\n        value={this.props.text}\r\n        onClick={this.props.onClick}\r\n      >\r\n        {this.props.text}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Button;\r\n","import React from \"react\";\nimport Screen from \"./Screen\";\nimport Button from \"./Button\";\nimport \"./styles.css\";\n\nlet flag = false;\nconst nums = Array.from(Array(10).keys()).reverse();\nconst symbset = [\"=\", \".\", \"-\", \"+\", \"*\", \"/\", \"%\", \"√\"].reverse();\nconst operators = [\"+\", \"-\", \"*\", \"/\"];\n//create 'operations' so operators and their functions can exists as variables\nconst operations = {\n  \"+\": function(a, b) {\n    return a + b;\n  },\n  \"-\": function(a, b) {\n    return a - b;\n  },\n  \"*\": function(a, b) {\n    return a * b;\n  },\n  \"/\": function(a, b) {\n    return a / b;\n  }\n};\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      scrValue: \"0\"\n    };\n  }\n\n  checklength(e){\n    if((this.state.scrValue + e.target.value).length>10)\n      this.setState({scrValue: this.state.scrValue.substring(0,10)});\n  }\n\n  //tests if a string contains only integer of float numbers\n  checkString(value) {\n    if (/^\\d+\\.\\d+$/.test(value) || /^\\d+$/.test(value)) return true;\n    else return false;\n  }\n\n  //manipulates the situation when 2 operators goes together in the screen.\n  replacesymbol(symb) {\n    // if there is an operator at the end of the string and the rest is a number,\n    // then the prexisted operator is replaced by the new operator clicked by user.\n    if (this.checkString(this.state.scrValue.slice(0, -1)))\n      this.setState({ scrValue: this.state.scrValue.slice(0, -1) + symb });\n    //else means that there is already an operator between 2 numbers in the screen and a second\n    //one comes in. The first in place operation completes and the sybmol of the\n    //new operation is added at the end of the result.\n    else {\n      this.setState({\n        scrValue:\n          //operations object has every possible operation, so we specify the operator\n          //by filtering operators array with the operator that is already included in\n          //the screen string and the 2 numbers needed for the operation are being given\n          operations[\n            //getting the operator that exist in the string\n            operators.filter(operator => this.state.scrValue.includes(operator))\n          ](\n            //transform string to number\n            Number(\n              //getting the first part of the string, the one before operator\n              this.state.scrValue.split(\n                operators.filter(operator =>\n                  this.state.scrValue.includes(operator)\n                )\n              )[0]\n            ),\n            //transform string to number\n            Number(\n              //getting the second part of the string, the one after operator\n              this.state.scrValue.split(\n                operators.filter(operator =>\n                  this.state.scrValue.includes(operator)\n                )\n              )[1]\n            )\n          ) + symb //adding the symbol of the new operation at the end\n      });\n    }\n  }\n\n  updateScreen(e) {\n\n    switch (e.target.value) {\n      case \"C\": {\n        this.setState({ scrValue: \"0\" });\n        break;\n      }\n      case \"←\": {\n        //check the length of screen value\n        if (this.state.scrValue.length > 1)\n          this.setState({\n            scrValue: this.state.scrValue.slice(0, -1),\n            symb: null\n          });\n        else this.setState({ scrValue: \"0\" });\n        break;\n      }\n      case \".\": {\n        if (\n          this.checkString(this.state.scrValue) &&\n          !this.state.scrValue.includes(\".\")\n        )\n          this.setState({ scrValue: this.state.scrValue + \".\" });\n        else if (\n          this.checkString(this.state.scrValue.slice(0, -1)) &&\n          !this.state.scrValue.includes(\".\")\n        )\n          this.setState({ scrValue: this.state.scrValue.slice(0, -1) + \".\" });\n        else if (\n          this.state.scrValue.split(\n            operators.filter(operator => this.state.scrValue.includes(operator))\n          )[1].length > 0 &&\n          !this.state.scrValue\n            .split(\n              operators.filter(operator =>\n                this.state.scrValue.includes(operator)\n              )\n            )[1]\n            .includes(\".\")\n        )\n          this.setState({\n            scrValue: this.state.scrValue + \".\"\n          });\n        break;\n      }\n      case \"+\": {\n        if (this.state.scrValue.includes(\"+\"))\n          this.setState({\n            scrValue:\n              this.state.scrValue\n                .split(\"+\")\n                .reduce((a, b) => Number(a) + Number(b)) + \"+\"\n          });\n        if (this.checkString(this.state.scrValue))\n          this.setState({ scrValue: this.state.scrValue + e.target.value });\n        else this.replacesymbol(\"+\");\n        break;\n      }\n      case \"-\": {\n        if (this.state.scrValue.includes(\"-\"))\n          this.setState({\n            scrValue:\n              this.state.scrValue\n                .split(\"-\")\n                .reduce((a, b) => Number(a) - Number(b)) + \"-\"\n          });\n        if (this.checkString(this.state.scrValue))\n          this.setState({ scrValue: this.state.scrValue + e.target.value });\n        else this.replacesymbol(\"-\");\n        break;\n      }\n      case \"*\": {\n        if (\n          this.state.scrValue.includes(\"*\") &&\n          this.state.scrValue.split(\"*\")[1] !== \"\"\n        )\n          this.setState({\n            scrValue:\n              this.state.scrValue\n                .split(\"*\")\n                .reduce((a, b) => Number(a) * Number(b)) + \"*\"\n          });\n        if (this.checkString(this.state.scrValue))\n          this.setState({ scrValue: this.state.scrValue + e.target.value });\n        else this.replacesymbol(\"*\");\n        break;\n      }\n      case \"/\": {\n        if (\n          this.state.scrValue.includes(\"/\") &&\n          this.state.scrValue.split(\"/\")[1] !== \"\"\n        )\n          this.setState({\n            scrValue:\n              this.state.scrValue\n                .split(\"/\")\n                .reduce((a, b) => Number(a) / Number(b)) + \"/\"\n          });\n        if (this.checkString(this.state.scrValue))\n          this.setState({ scrValue: this.state.scrValue + e.target.value });\n        else this.replacesymbol(\"/\");\n        break;\n      }\n      case \"√\": {\n        if (this.checkString(this.state.scrValue))\n          this.setState({ scrValue: String(Math.sqrt(this.state.scrValue)) });\n        else if (this.checkString(this.state.scrValue.slice(0, -1)))\n          this.setState({\n            scrValue: String(Math.sqrt(this.state.scrValue.slice(0, -1)))\n          });\n        else\n          this.setState({\n            scrValue:\n              this.state.scrValue.split(\n                operators.filter(operator =>\n                  this.state.scrValue.includes(operator)\n                )\n              )[0] +\n              operators.filter(operator =>\n                this.state.scrValue.includes(operator)\n              ) +\n              String(\n                Math.sqrt(\n                  this.state.scrValue.split(\n                    operators.filter(operator =>\n                      this.state.scrValue.includes(operator)\n                    )\n                  )[1]\n                )\n              )\n          });\n        break;\n      }\n      case \"%\": {\n\n        if (this.checkString(this.state.scrValue))\n          this.setState({ scrValue: \"0\" });\n        else if (this.checkString(this.state.scrValue.slice(0, -1)))\n          this.setState({\n            scrValue:\n              this.state.scrValue +\n              String(\n                (this.state.scrValue.slice(0, -1) *\n                  this.state.scrValue.slice(0, -1)) /\n                  100\n              )\n          });\n        else\n          this.setState({\n            scrValue:\n              this.state.scrValue.split(\n                operators.filter(operator =>\n                  this.state.scrValue.includes(operator)\n                )\n              )[0] +\n              operators.filter(operator =>\n                this.state.scrValue.includes(operator)\n              ) +\n              String(\n                (this.state.scrValue.split(\n                  operators.filter(operator =>\n                    this.state.scrValue.includes(operator)\n                  )\n                )[0] *\n                  this.state.scrValue.split(\n                    operators.filter(operator =>\n                      this.state.scrValue.includes(operator)\n                    )\n                  )[1]) /\n                  100\n              )\n          });\n          this.checklength(e);\n        break;\n      }\n      case \"=\": {\n        this.checklength(e);\n        if (this.checkString(this.state.scrValue)) break;\n        if (this.state.scrValue.slice(-1) === \".\") {\n          this.setState({ scrValue: this.state.scrValue.slice(0, -1) });\n          break;\n        }\n        if (this.checkString(this.state.scrValue.slice(0, -1)))\n          this.setState({\n            scrValue: operations[this.state.scrValue.slice(-1)](\n              Number(this.state.scrValue.slice(0, -1)),\n              Number(this.state.scrValue.slice(0, -1))\n            )\n          });\n        else this.replacesymbol(\"\");\n        flag = true;\n        break;\n      }\n      default: {\n        //check if '0' is the initial value\n\n        this.state.scrValue === \"0\" ||\n        (flag && this.checkString(this.state.scrValue))\n          ? this.setState({ scrValue: e.target.value })\n          : this.setState({ scrValue: this.state.scrValue + e.target.value });\n\n        flag = false;\n        this.checklength(e);\n\n\n        break;\n      }\n    }\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Screen scrValue={this.state.scrValue} />\n        <div className=\"clearContainer\">\n          <Button text={\"←\"} onClick={e => this.updateScreen(e)} />\n          <Button text={\"C\"} onClick={e => this.updateScreen(e)} />\n        </div>\n        <div className=\"numsContainer\">\n          {nums.map(num => (\n            <Button text={num} onClick={e => this.updateScreen(e)} />\n          ))}\n        </div>\n        <div className=\"symbsetContainer\">\n          {symbset.map(symb => (\n            <Button text={symb} onClick={e => this.updateScreen(e)} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}