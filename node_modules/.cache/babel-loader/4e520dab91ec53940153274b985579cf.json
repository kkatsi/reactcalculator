{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\reactcalculator\\\\src\\\\App.js\";\nimport React from \"react\";\nimport Screen from \"./Screen\";\nimport Button from \"./Button\";\nimport \"./styles.css\";\nlet flag = false;\nconst nums = Array.from(Array(10).keys()).reverse();\nconst symbset = [\"=\", \".\", \"-\", \"+\", \"*\", \"/\", \"%\", \"√\"].reverse();\nconst operators = [\"+\", \"-\", \"*\", \"/\"]; //create 'operations' so operators and their functions can exists as variables\n\nconst operations = {\n  \"+\": function _(a, b) {\n    return a + b;\n  },\n  \"-\": function _(a, b) {\n    return a - b;\n  },\n  \"*\": function _(a, b) {\n    return a * b;\n  },\n  \"/\": function _(a, b) {\n    return a / b;\n  }\n};\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      scrValue: \"0\"\n    };\n  } //tests if a string contains only integer of float numbers\n\n\n  checkString(value) {\n    if (/^\\d+\\.\\d+$/.test(value) || /^\\d+$/.test(value)) return true;else return false;\n  } //manipulates the situation when 2 operators goes together in the screen.\n\n\n  replacesymbol(symb) {\n    // if there is an operator at the end of the string and the rest is a number,\n    // then the prexisted operator is replaced by the new operator clicked by user.\n    if (this.checkString(this.state.scrValue.slice(0, -1))) this.setState({\n      scrValue: this.state.scrValue.slice(0, -1) + symb\n    }); //else means that there is already an operator between 2 numbers in the screen and a second\n    //one comes in. The first in place operation completes and the sybmol of the\n    //new operation is added at the end of the result.\n    else {\n        this.setState({\n          scrValue: //operations object has every possible operation, so we specify the operator\n          //by filtering operators array with the operator that is already included in\n          //the screen string and the 2 numbers needed for the operation are being given\n          operations[//getting the operator that exist in the string\n          operators.filter(operator => this.state.scrValue.includes(operator))]( //transform string to number\n          Number( //getting the first part of the string, the one before operator\n          this.state.scrValue.split(operators.filter(operator => this.state.scrValue.includes(operator)))[0]), //transform string to number\n          Number( //getting the second part of the string, the one after operator\n          this.state.scrValue.split(operators.filter(operator => this.state.scrValue.includes(operator)))[1])) + symb //adding the symbol of the new operation at the end\n\n        });\n      }\n  }\n\n  updateScreen(e) {\n    console.log(flag);\n\n    switch (e.target.value) {\n      case \"C\":\n        {\n          this.setState({\n            scrValue: \"0\"\n          });\n          break;\n        }\n\n      case \"←\":\n        {\n          //check the length of screen value\n          if (this.state.scrValue.length > 1) this.setState({\n            scrValue: this.state.scrValue.slice(0, -1),\n            symb: null\n          });else this.setState({\n            scrValue: \"0\"\n          });\n          break;\n        }\n\n      case \".\":\n        {\n          if (this.checkString(this.state.scrValue) && !this.state.scrValue.includes(\".\")) this.setState({\n            scrValue: this.state.scrValue + \".\"\n          });else if (this.checkString(this.state.scrValue.slice(0, -1)) && !this.state.scrValue.includes(\".\")) this.setState({\n            scrValue: this.state.scrValue.slice(0, -1) + \".\"\n          });else if (this.state.scrValue.split(operators.filter(operator => this.state.scrValue.includes(operator)))[1].length > 0 && !this.state.scrValue.split(operators.filter(operator => this.state.scrValue.includes(operator)))[1].includes(\".\")) this.setState({\n            scrValue: this.state.scrValue + \".\"\n          }); // console.log(this.state.scrValue.split(this.state.operator)[1]);\n          // if (\n          //   (!this.state.scrValue.split(this.state.operator)[0].includes(\".\") &&\n          //     this.checkString(this.state.scrValue)) ||\n          //   (!this.checkString(this.state.scrValue) &&\n          //     !this.state.scrValue.split(this.state.operator)[1].includes(\".\") &&\n          //     this.state.scrValue.split(this.state.operator)[1] !== \"\")\n          // ) {\n          //   this.setState({\n          //     scrValue: this.state.scrValue + e.target.value\n          //   });\n          // }\n          // if (\n          //   !this.state.scrValue.split(this.state.operator)[0].includes(\".\") &&\n          //   this.state.scrValue.split(this.state.operator)[1] === \"\"\n          // )\n          //   this.setState({\n          //     scrValue: this.state.scrValue.slice(0, -1) + e.target.value\n          //   });\n\n          break;\n        }\n\n      case \"+\":\n        {\n          if (this.state.scrValue.includes(\"+\")) this.setState({\n            scrValue: this.state.scrValue.split(\"+\").reduce((a, b) => Number(a) + Number(b)) + \"+\"\n          });\n          if (this.checkString(this.state.scrValue)) this.setState({\n            scrValue: this.state.scrValue + e.target.value\n          });else this.replacesymbol(\"+\");\n          break;\n        }\n\n      case \"-\":\n        {\n          if (this.state.scrValue.includes(\"-\")) this.setState({\n            scrValue: this.state.scrValue.split(\"-\").reduce((a, b) => Number(a) - Number(b)) + \"-\"\n          });\n          if (this.checkString(this.state.scrValue)) this.setState({\n            scrValue: this.state.scrValue + e.target.value\n          });else this.replacesymbol(\"-\");\n          break;\n        }\n\n      case \"*\":\n        {\n          if (this.state.scrValue.includes(\"*\") && this.state.scrValue.split(\"*\")[1] !== \"\") this.setState({\n            scrValue: this.state.scrValue.split(\"*\").reduce((a, b) => Number(a) * Number(b)) + \"*\"\n          });\n          if (this.checkString(this.state.scrValue)) this.setState({\n            scrValue: this.state.scrValue + e.target.value\n          });else this.replacesymbol(\"*\");\n          break;\n        }\n\n      case \"/\":\n        {\n          if (this.state.scrValue.includes(\"/\") && this.state.scrValue.split(\"/\")[1] !== \"\") this.setState({\n            scrValue: this.state.scrValue.split(\"/\").reduce((a, b) => Number(a) / Number(b)) + \"/\"\n          });\n          if (this.checkString(this.state.scrValue)) this.setState({\n            scrValue: this.state.scrValue + e.target.value\n          });else this.replacesymbol(\"/\");\n          break;\n        }\n\n      case \"√\":\n        {\n          if (this.checkString(this.state.scrValue)) this.setState({\n            scrValue: String(Math.sqrt(this.state.scrValue))\n          });else if (this.checkString(this.state.scrValue.slice(0, -1))) this.setState({\n            scrValue: String(Math.sqrt(this.state.scrValue.slice(0, -1)))\n          });else this.setState({\n            scrValue: this.state.scrValue.split(operators.filter(operator => this.state.scrValue.includes(operator)))[0] + operators.filter(operator => this.state.scrValue.includes(operator)) + String(Math.sqrt(this.state.scrValue.split(operators.filter(operator => this.state.scrValue.includes(operator)))[1]))\n          });\n          break;\n        }\n\n      case \"%\":\n        {\n          if (this.checkString(this.state.scrValue)) this.setState({\n            scrValue: \"0\"\n          });else if (this.checkString(this.state.scrValue.slice(0, -1))) this.setState({\n            scrValue: this.state.scrValue + String(this.state.scrValue.slice(0, -1) * this.state.scrValue.slice(0, -1) / 100)\n          });else this.setState({\n            scrValue: this.state.scrValue.split(operators.filter(operator => this.state.scrValue.includes(operator)))[0] + operators.filter(operator => this.state.scrValue.includes(operator)) + String(this.state.scrValue.split(operators.filter(operator => this.state.scrValue.includes(operator)))[0] * this.state.scrValue.split(operators.filter(operator => this.state.scrValue.includes(operator)))[1] / 100)\n          });\n          break;\n        }\n\n      case \"=\":\n        {\n          flag = true;\n          if (this.checkString(this.state.scrValue)) break;\n\n          if (this.state.scrValue.slice(-1) === \".\") {\n            this.setState({\n              scrValue: this.state.scrValue.slice(0, -1)\n            });\n            break;\n          }\n\n          if (this.checkString(this.state.scrValue.slice(0, -1))) this.setState({\n            scrValue: operations[this.state.scrValue.slice(-1)](Number(this.state.scrValue.slice(0, -1)), Number(this.state.scrValue.slice(0, -1)))\n          });else this.replacesymbol(\"\");\n          break;\n        }\n\n      default:\n        {\n          //check if '0' is the initial value\n          this.state.scrValue === \"0\" || flag && this.checkString(this.state.scrValue) ? this.setState({\n            scrValue: e.target.value\n          }) : this.setState({\n            scrValue: this.state.scrValue + e.target.value\n          });\n          flag = false;\n          break;\n        }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Screen, {\n      scrValue: this.state.scrValue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"clearContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      text: \"←\",\n      onClick: e => this.updateScreen(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      text: \"C\",\n      onClick: e => this.updateScreen(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"numsContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }\n    }, nums.map(num => /*#__PURE__*/React.createElement(Button, {\n      text: num,\n      onClick: e => this.updateScreen(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"symbsetContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }\n    }, symbset.map(symb => /*#__PURE__*/React.createElement(Button, {\n      text: symb,\n      onClick: e => this.updateScreen(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/React/reactcalculator/src/App.js"],"names":["React","Screen","Button","flag","nums","Array","from","keys","reverse","symbset","operators","operations","a","b","App","Component","constructor","state","scrValue","checkString","value","test","replacesymbol","symb","slice","setState","filter","operator","includes","Number","split","updateScreen","e","console","log","target","length","reduce","String","Math","sqrt","render","map","num"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Screen from \"./Screen\";\nimport Button from \"./Button\";\nimport \"./styles.css\";\n\nlet flag = false;\nconst nums = Array.from(Array(10).keys()).reverse();\nconst symbset = [\"=\", \".\", \"-\", \"+\", \"*\", \"/\", \"%\", \"√\"].reverse();\nconst operators = [\"+\", \"-\", \"*\", \"/\"];\n//create 'operations' so operators and their functions can exists as variables\nconst operations = {\n  \"+\": function(a, b) {\n    return a + b;\n  },\n  \"-\": function(a, b) {\n    return a - b;\n  },\n  \"*\": function(a, b) {\n    return a * b;\n  },\n  \"/\": function(a, b) {\n    return a / b;\n  }\n};\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      scrValue: \"0\"\n    };\n  }\n\n  //tests if a string contains only integer of float numbers\n  checkString(value) {\n    if (/^\\d+\\.\\d+$/.test(value) || /^\\d+$/.test(value)) return true;\n    else return false;\n  }\n\n  //manipulates the situation when 2 operators goes together in the screen.\n  replacesymbol(symb) {\n    // if there is an operator at the end of the string and the rest is a number,\n    // then the prexisted operator is replaced by the new operator clicked by user.\n    if (this.checkString(this.state.scrValue.slice(0, -1)))\n      this.setState({ scrValue: this.state.scrValue.slice(0, -1) + symb });\n    //else means that there is already an operator between 2 numbers in the screen and a second\n    //one comes in. The first in place operation completes and the sybmol of the\n    //new operation is added at the end of the result.\n    else {\n      this.setState({\n        scrValue:\n          //operations object has every possible operation, so we specify the operator\n          //by filtering operators array with the operator that is already included in\n          //the screen string and the 2 numbers needed for the operation are being given\n          operations[\n            //getting the operator that exist in the string\n            operators.filter(operator => this.state.scrValue.includes(operator))\n          ](\n            //transform string to number\n            Number(\n              //getting the first part of the string, the one before operator\n              this.state.scrValue.split(\n                operators.filter(operator =>\n                  this.state.scrValue.includes(operator)\n                )\n              )[0]\n            ),\n            //transform string to number\n            Number(\n              //getting the second part of the string, the one after operator\n              this.state.scrValue.split(\n                operators.filter(operator =>\n                  this.state.scrValue.includes(operator)\n                )\n              )[1]\n            )\n          ) + symb //adding the symbol of the new operation at the end\n      });\n    }\n  }\n\n  updateScreen(e) {\n    console.log(flag);\n\n    switch (e.target.value) {\n      case \"C\": {\n        this.setState({ scrValue: \"0\" });\n        break;\n      }\n      case \"←\": {\n        //check the length of screen value\n        if (this.state.scrValue.length > 1)\n          this.setState({\n            scrValue: this.state.scrValue.slice(0, -1),\n            symb: null\n          });\n        else this.setState({ scrValue: \"0\" });\n        break;\n      }\n      case \".\": {\n        if (\n          this.checkString(this.state.scrValue) &&\n          !this.state.scrValue.includes(\".\")\n        )\n          this.setState({ scrValue: this.state.scrValue + \".\" });\n        else if (\n          this.checkString(this.state.scrValue.slice(0, -1)) &&\n          !this.state.scrValue.includes(\".\")\n        )\n          this.setState({ scrValue: this.state.scrValue.slice(0, -1) + \".\" });\n        else if (\n          this.state.scrValue.split(\n            operators.filter(operator => this.state.scrValue.includes(operator))\n          )[1].length > 0 &&\n          !this.state.scrValue\n            .split(\n              operators.filter(operator =>\n                this.state.scrValue.includes(operator)\n              )\n            )[1]\n            .includes(\".\")\n        )\n          this.setState({\n            scrValue: this.state.scrValue + \".\"\n          });\n        // console.log(this.state.scrValue.split(this.state.operator)[1]);\n        // if (\n        //   (!this.state.scrValue.split(this.state.operator)[0].includes(\".\") &&\n        //     this.checkString(this.state.scrValue)) ||\n        //   (!this.checkString(this.state.scrValue) &&\n        //     !this.state.scrValue.split(this.state.operator)[1].includes(\".\") &&\n        //     this.state.scrValue.split(this.state.operator)[1] !== \"\")\n        // ) {\n        //   this.setState({\n        //     scrValue: this.state.scrValue + e.target.value\n        //   });\n        // }\n\n        // if (\n        //   !this.state.scrValue.split(this.state.operator)[0].includes(\".\") &&\n        //   this.state.scrValue.split(this.state.operator)[1] === \"\"\n        // )\n        //   this.setState({\n        //     scrValue: this.state.scrValue.slice(0, -1) + e.target.value\n        //   });\n        break;\n      }\n      case \"+\": {\n        if (this.state.scrValue.includes(\"+\"))\n          this.setState({\n            scrValue:\n              this.state.scrValue\n                .split(\"+\")\n                .reduce((a, b) => Number(a) + Number(b)) + \"+\"\n          });\n        if (this.checkString(this.state.scrValue))\n          this.setState({ scrValue: this.state.scrValue + e.target.value });\n        else this.replacesymbol(\"+\");\n        break;\n      }\n      case \"-\": {\n        if (this.state.scrValue.includes(\"-\"))\n          this.setState({\n            scrValue:\n              this.state.scrValue\n                .split(\"-\")\n                .reduce((a, b) => Number(a) - Number(b)) + \"-\"\n          });\n        if (this.checkString(this.state.scrValue))\n          this.setState({ scrValue: this.state.scrValue + e.target.value });\n        else this.replacesymbol(\"-\");\n        break;\n      }\n      case \"*\": {\n        if (\n          this.state.scrValue.includes(\"*\") &&\n          this.state.scrValue.split(\"*\")[1] !== \"\"\n        )\n          this.setState({\n            scrValue:\n              this.state.scrValue\n                .split(\"*\")\n                .reduce((a, b) => Number(a) * Number(b)) + \"*\"\n          });\n        if (this.checkString(this.state.scrValue))\n          this.setState({ scrValue: this.state.scrValue + e.target.value });\n        else this.replacesymbol(\"*\");\n        break;\n      }\n      case \"/\": {\n        if (\n          this.state.scrValue.includes(\"/\") &&\n          this.state.scrValue.split(\"/\")[1] !== \"\"\n        )\n          this.setState({\n            scrValue:\n              this.state.scrValue\n                .split(\"/\")\n                .reduce((a, b) => Number(a) / Number(b)) + \"/\"\n          });\n        if (this.checkString(this.state.scrValue))\n          this.setState({ scrValue: this.state.scrValue + e.target.value });\n        else this.replacesymbol(\"/\");\n        break;\n      }\n      case \"√\": {\n        if (this.checkString(this.state.scrValue))\n          this.setState({ scrValue: String(Math.sqrt(this.state.scrValue)) });\n        else if (this.checkString(this.state.scrValue.slice(0, -1)))\n          this.setState({\n            scrValue: String(Math.sqrt(this.state.scrValue.slice(0, -1)))\n          });\n        else\n          this.setState({\n            scrValue:\n              this.state.scrValue.split(\n                operators.filter(operator =>\n                  this.state.scrValue.includes(operator)\n                )\n              )[0] +\n              operators.filter(operator =>\n                this.state.scrValue.includes(operator)\n              ) +\n              String(\n                Math.sqrt(\n                  this.state.scrValue.split(\n                    operators.filter(operator =>\n                      this.state.scrValue.includes(operator)\n                    )\n                  )[1]\n                )\n              )\n          });\n        break;\n      }\n      case \"%\": {\n        if (this.checkString(this.state.scrValue))\n          this.setState({ scrValue: \"0\" });\n        else if (this.checkString(this.state.scrValue.slice(0, -1)))\n          this.setState({\n            scrValue:\n              this.state.scrValue +\n              String(\n                (this.state.scrValue.slice(0, -1) *\n                  this.state.scrValue.slice(0, -1)) /\n                  100\n              )\n          });\n        else\n          this.setState({\n            scrValue:\n              this.state.scrValue.split(\n                operators.filter(operator =>\n                  this.state.scrValue.includes(operator)\n                )\n              )[0] +\n              operators.filter(operator =>\n                this.state.scrValue.includes(operator)\n              ) +\n              String(\n                (this.state.scrValue.split(\n                  operators.filter(operator =>\n                    this.state.scrValue.includes(operator)\n                  )\n                )[0] *\n                  this.state.scrValue.split(\n                    operators.filter(operator =>\n                      this.state.scrValue.includes(operator)\n                    )\n                  )[1]) /\n                  100\n              )\n          });\n        break;\n      }\n      case \"=\": {\n        flag = true;\n        if (this.checkString(this.state.scrValue)) break;\n        if (this.state.scrValue.slice(-1) === \".\") {\n          this.setState({ scrValue: this.state.scrValue.slice(0, -1) });\n          break;\n        }\n        if (this.checkString(this.state.scrValue.slice(0, -1)))\n          this.setState({\n            scrValue: operations[this.state.scrValue.slice(-1)](\n              Number(this.state.scrValue.slice(0, -1)),\n              Number(this.state.scrValue.slice(0, -1))\n            )\n          });\n        else this.replacesymbol(\"\");\n\n        break;\n      }\n      default: {\n        //check if '0' is the initial value\n        this.state.scrValue === \"0\" ||\n        (flag && this.checkString(this.state.scrValue))\n          ? this.setState({ scrValue: e.target.value })\n          : this.setState({ scrValue: this.state.scrValue + e.target.value });\n\n        flag = false;\n\n        break;\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Screen scrValue={this.state.scrValue} />\n        <div className=\"clearContainer\">\n          <Button text={\"←\"} onClick={e => this.updateScreen(e)} />\n          <Button text={\"C\"} onClick={e => this.updateScreen(e)} />\n        </div>\n        <div className=\"numsContainer\">\n          {nums.map(num => (\n            <Button text={num} onClick={e => this.updateScreen(e)} />\n          ))}\n        </div>\n        <div className=\"symbsetContainer\">\n          {symbset.map(symb => (\n            <Button text={symb} onClick={e => this.updateScreen(e)} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}