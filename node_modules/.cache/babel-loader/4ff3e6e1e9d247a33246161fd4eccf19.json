{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\reactcalculator\\\\src\\\\App.js\";\nimport React from \"react\";\nimport Screen from \"./Screen\";\nimport Button from \"./Button\";\nimport \"./styles.css\";\nlet flag = false;\nconst nums = Array.from(Array(10).keys()).reverse();\nconst symbset = [\"=\", \".\", \"-\", \"+\", \"*\", \"/\", \"%\", \"√\"].reverse();\nconst operators = [\"+\", \"-\", \"*\", \"/\"]; //create 'operations' so operators and their functions can exists as variables\n\nconst operations = {\n  \"+\": function _(a, b) {\n    return a + b;\n  },\n  \"-\": function _(a, b) {\n    return a - b;\n  },\n  \"*\": function _(a, b) {\n    return (a * b).toPrecision(10);\n  },\n  \"/\": function _(a, b) {\n    return (a / b).toPrecision(10);\n  }\n};\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      scrValue: \"0\"\n    };\n  }\n\n  checklength(e) {\n    if ((this.state.scrValue + e.target.value).length > 10) this.setState({\n      scrValue: this.state.scrValue.substring(0, 10)\n    });\n  } //tests if a string contains only integer of float numbers\n\n\n  checkString(value) {\n    if (/^\\d+\\.\\d+$/.test(value) || /^\\d+$/.test(value)) return true;else return false;\n  } //manipulates the situation when 2 operators goes together in the screen.\n\n\n  replacesymbol(symb) {\n    // if there is an operator at the end of the string and the rest is a number,\n    // then the prexisted operator is replaced by the new operator clicked by user.\n    if (this.checkString(this.state.scrValue.slice(0, -1))) this.setState({\n      scrValue: this.state.scrValue.slice(0, -1) + symb\n    }); //one comes in. The first in place operation completes and the sybmol of the\n    //new operation is added at the end of the result. //else means that there is already an operator between 2 numbers in the screen and a second\n    else {\n        this.setState({\n          scrValue: //operations object has every possible operation, so we specify the operator\n          //by filtering operators array with the operator that is already included in\n          //the screen string and the 2 numbers needed for the operation are being given\n          operations[//getting the operator that exist in the string\n          operators.filter(operator => this.state.scrValue.includes(operator))]( //transform string to number\n          Number( //getting the first part of the string, the one before operator\n          this.state.scrValue.split(operators.filter(operator => this.state.scrValue.includes(operator)))[0]), //transform string to number\n          Number( //getting the second part of the string, the one after operator\n          this.state.scrValue.split(operators.filter(operator => this.state.scrValue.includes(operator)))[1])) + symb //adding the symbol of the new operation at the end\n\n        });\n      }\n  }\n\n  updateScreen(e) {\n    switch (e.target.value) {\n      case \"C\":\n        {\n          this.setState({\n            scrValue: \"0\"\n          });\n          break;\n        }\n\n      case \"←\":\n        {\n          //check the length of screen value\n          if (this.state.scrValue.length > 1) this.setState({\n            scrValue: this.state.scrValue.slice(0, -1),\n            symb: null\n          });else this.setState({\n            scrValue: \"0\"\n          });\n          break;\n        }\n\n      case \".\":\n        {\n          console.log();\n          if (this.checkString(Number(this.state.scrValue + e.target.value))) this.setState({\n            scrValue: this.state.scrValue + \".\"\n          }); // else if (\n          //   operators.filter(operator => this.state.scrValue.slice(0, -1)).includes(operator)\n          // )\n          //   this.setState({ scrValue: this.state.scrValue.slice(0, -1) + \".\" });\n          else if (operators.filter(operator => this.state.scrValue.includes(operator)) != \"\" && this.state.scrValue.split(operators.filter(operator => this.state.scrValue.includes(operator)))[1].length > 0 && this.checkString(Number(this.state.scrValue.split(operators.filter(operator => this.state.scrValue.includes(operator)))[1] + e.target.value))) this.setState({\n              scrValue: this.state.scrValue + \".\"\n            }); // console.log(operators.filter(operator => this.state.scrValue.includes(operator)).includes(\"\"));\n          // if (\n          //   this.checkString(this.state.scrValue) &&\n          //   !this.state.scrValue.includes(\".\")\n          // )\n          //   this.setState({ scrValue: this.state.scrValue + \".\" });\n          // else if (\n          //   this.checkString(this.state.scrValue.slice(0, -1)) &&\n          //   !this.state.scrValue.includes(\".\")\n          // )\n          // this.setState({ scrValue: this.state.scrValue.slice(0, -1) + \".\" });\n          // else if (\n          //\n          // this.state.scrValue.split(operators.filter(operator => this.state.scrValue.includes(operator)))[1].length > 0 &&\n          // !this.state.scrValue\n          //   .split(\n          //     operators.filter(operator =>\n          //       this.state.scrValue.includes(operator)\n          //     )\n          //   )[1]\n          //   .includes(\".\")\n          // )\n          // this.setState({\n          //   scrValue: this.state.scrValue + \".\"\n          // });\n\n          break;\n        }\n\n      case \"+\":\n        {\n          if (this.state.scrValue.includes(\"+\")) this.setState({\n            scrValue: this.state.scrValue.split(\"+\").reduce((a, b) => Number(a) + Number(b)) + \"+\"\n          });\n          if (this.checkString(this.state.scrValue)) this.setState({\n            scrValue: this.state.scrValue + e.target.value\n          });else this.replacesymbol(\"+\");\n          break;\n        }\n\n      case \"-\":\n        {\n          if (this.state.scrValue.includes(\"-\")) this.setState({\n            scrValue: this.state.scrValue.split(\"-\").reduce((a, b) => Number(a) - Number(b)) + \"-\"\n          });\n          if (this.checkString(this.state.scrValue)) this.setState({\n            scrValue: this.state.scrValue + e.target.value\n          });else this.replacesymbol(\"-\");\n          break;\n        }\n\n      case \"*\":\n        {\n          if (this.state.scrValue.includes(\"*\") && this.state.scrValue.split(\"*\")[1] !== \"\") this.setState({\n            scrValue: this.state.scrValue.split(\"*\").reduce((a, b) => Number(a) * Number(b)) + \"*\"\n          });\n          if (this.checkString(this.state.scrValue)) this.setState({\n            scrValue: this.state.scrValue + e.target.value\n          });else this.replacesymbol(\"*\");\n          break;\n        }\n\n      case \"/\":\n        {\n          if (this.state.scrValue.includes(\"/\") && this.state.scrValue.split(\"/\")[1] !== \"\") this.setState({\n            scrValue: this.state.scrValue.split(\"/\").reduce((a, b) => Number(a) / Number(b)) + \"/\"\n          });\n          if (this.checkString(this.state.scrValue)) this.setState({\n            scrValue: this.state.scrValue + e.target.value\n          });else this.replacesymbol(\"/\");\n          break;\n        }\n\n      case \"√\":\n        {\n          if (this.checkString(this.state.scrValue)) this.setState({\n            scrValue: String(Math.sqrt(this.state.scrValue).toPrecision(4))\n          });else if (this.checkString(this.state.scrValue.slice(0, -1))) this.setState({\n            scrValue: String(Math.sqrt(this.state.scrValue.slice(0, -1).toPrecision(4)))\n          });else this.setState({\n            scrValue: this.state.scrValue.split(operators.filter(operator => this.state.scrValue.includes(operator)))[0] + operators.filter(operator => this.state.scrValue.includes(operator)) + String(Math.sqrt(this.state.scrValue.split(operators.filter(operator => this.state.scrValue.includes(operator)))[1]).toPrecision(10))\n          });\n          break;\n        }\n\n      case \"%\":\n        {\n          if (this.checkString(this.state.scrValue)) this.setState({\n            scrValue: \"0\"\n          });else if (this.checkString(this.state.scrValue.slice(0, -1))) this.setState({\n            scrValue: this.state.scrValue + String((this.state.scrValue.slice(0, -1) * this.state.scrValue.slice(0, -1) / 100).toPrecision(6))\n          });else this.setState({\n            scrValue: this.state.scrValue.split(operators.filter(operator => this.state.scrValue.includes(operator)))[0] + operators.filter(operator => this.state.scrValue.includes(operator)) + String((this.state.scrValue.split(operators.filter(operator => this.state.scrValue.includes(operator)))[0] * this.state.scrValue.split(operators.filter(operator => this.state.scrValue.includes(operator)))[1] / 100).toPrecision(10))\n          });\n          this.checklength(e);\n          break;\n        }\n\n      case \"=\":\n        {\n          this.checklength(e);\n          if (this.checkString(this.state.scrValue)) break;\n\n          if (this.state.scrValue.slice(-1) === \".\") {\n            this.setState({\n              scrValue: this.state.scrValue.slice(0, -1)\n            });\n            break;\n          }\n\n          if (this.checkString(this.state.scrValue.slice(0, -1))) this.setState({\n            scrValue: operations[this.state.scrValue.slice(-1)](Number(this.state.scrValue.slice(0, -1)), Number(this.state.scrValue.slice(0, -1)))\n          });else this.replacesymbol(\"\");\n          flag = true;\n          break;\n        }\n\n      default:\n        {\n          //check if '0' is the initial value\n          this.state.scrValue === \"0\" || flag && this.checkString(this.state.scrValue) ? this.setState({\n            scrValue: e.target.value\n          }) : this.setState({\n            scrValue: this.state.scrValue + e.target.value\n          });\n          flag = false;\n          this.checklength(e);\n          break;\n        }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Screen, {\n      scrValue: this.state.scrValue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"keypad\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"clearContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      text: \"←\",\n      onClick: e => this.updateScreen(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 13\n      }\n    }), \" \", /*#__PURE__*/React.createElement(Button, {\n      text: \"C\",\n      onClick: e => this.updateScreen(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 13\n      }\n    }), \" \"), \" \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"numsContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 11\n      }\n    }, \" \", nums.map(num => /*#__PURE__*/React.createElement(Button, {\n      text: num,\n      onClick: e => this.updateScreen(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 15\n      }\n    })), \" \"), \" \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"symbsetContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 11\n      }\n    }, \" \", symbset.map(symb => /*#__PURE__*/React.createElement(Button, {\n      text: symb,\n      onClick: e => this.updateScreen(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 15\n      }\n    })), \" \"), \" \"), \" \");\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/React/reactcalculator/src/App.js"],"names":["React","Screen","Button","flag","nums","Array","from","keys","reverse","symbset","operators","operations","a","b","toPrecision","App","Component","constructor","state","scrValue","checklength","e","target","value","length","setState","substring","checkString","test","replacesymbol","symb","slice","filter","operator","includes","Number","split","updateScreen","console","log","reduce","String","Math","sqrt","render","map","num"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Screen from \"./Screen\";\nimport Button from \"./Button\";\nimport \"./styles.css\";\n\nlet flag = false;\nconst nums = Array.from(Array(10).keys()).reverse();\nconst symbset = [\"=\", \".\", \"-\", \"+\", \"*\", \"/\", \"%\", \"√\"].reverse();\n\nconst operators = [\"+\", \"-\", \"*\", \"/\"];\n//create 'operations' so operators and their functions can exists as variables\nconst operations = {\n  \"+\": function(a, b) {\n    return a + b;\n  },\n  \"-\": function(a, b) {\n    return a - b;\n  },\n  \"*\": function(a, b) {\n    return (a * b).toPrecision(10);\n  },\n  \"/\": function(a, b) {\n    return (a / b).toPrecision(10);\n  }\n};\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      scrValue: \"0\"\n    };\n  }\n\n  checklength(e) {\n    if ((this.state.scrValue + e.target.value).length > 10)\n      this.setState({\n        scrValue: this.state.scrValue.substring(0, 10)\n      });\n  }\n\n  //tests if a string contains only integer of float numbers\n  checkString(value) {\n    if (/^\\d+\\.\\d+$/.test(value) || /^\\d+$/.test(value)) return true;\n    else return false;\n  }\n\n  //manipulates the situation when 2 operators goes together in the screen.\n  replacesymbol(symb) {\n    // if there is an operator at the end of the string and the rest is a number,\n    // then the prexisted operator is replaced by the new operator clicked by user.\n    if (this.checkString(this.state.scrValue.slice(0, -1)))\n      this.setState({\n        scrValue: this.state.scrValue.slice(0, -1) + symb\n      });\n    //one comes in. The first in place operation completes and the sybmol of the\n    //new operation is added at the end of the result. //else means that there is already an operator between 2 numbers in the screen and a second\n    else {\n      this.setState({\n        scrValue:\n          //operations object has every possible operation, so we specify the operator\n          //by filtering operators array with the operator that is already included in\n          //the screen string and the 2 numbers needed for the operation are being given\n          operations[ //getting the operator that exist in the string\n            operators.filter(operator => this.state.scrValue.includes(operator))\n          ](\n            //transform string to number\n            Number(\n              //getting the first part of the string, the one before operator\n              this.state.scrValue.split(\n                operators.filter(operator =>\n                  this.state.scrValue.includes(operator)\n                )\n              )[0]\n            ),\n            //transform string to number\n            Number(\n              //getting the second part of the string, the one after operator\n              this.state.scrValue.split(\n                operators.filter(operator =>\n                  this.state.scrValue.includes(operator)\n                )\n              )[1]\n            )\n          ) + symb //adding the symbol of the new operation at the end\n      });\n    }\n  }\n\n  updateScreen(e) {\n    switch (e.target.value) {\n      case \"C\": {\n        this.setState({\n          scrValue: \"0\"\n        });\n        break;\n      }\n      case \"←\": {\n        //check the length of screen value\n        if (this.state.scrValue.length > 1)\n          this.setState({\n            scrValue: this.state.scrValue.slice(0, -1),\n            symb: null\n          });\n        else\n          this.setState({\n            scrValue: \"0\"\n          });\n        break;\n      }\n      case \".\": {\n        console.log();\n        if (this.checkString(Number(this.state.scrValue + e.target.value)))\n          this.setState({\n            scrValue: this.state.scrValue + \".\"\n          });\n        // else if (\n        //   operators.filter(operator => this.state.scrValue.slice(0, -1)).includes(operator)\n        // )\n        //   this.setState({ scrValue: this.state.scrValue.slice(0, -1) + \".\" });\n        else if (\n          operators.filter(operator =>\n            this.state.scrValue.includes(operator)\n          ) != \"\" &&\n          this.state.scrValue.split(\n            operators.filter(operator => this.state.scrValue.includes(operator))\n          )[1].length > 0 &&\n          this.checkString(\n            Number(\n              this.state.scrValue.split(\n                operators.filter(operator =>\n                  this.state.scrValue.includes(operator)\n                )\n              )[1] + e.target.value\n            )\n          )\n        )\n          this.setState({\n            scrValue: this.state.scrValue + \".\"\n          });\n\n        // console.log(operators.filter(operator => this.state.scrValue.includes(operator)).includes(\"\"));\n        // if (\n        //   this.checkString(this.state.scrValue) &&\n        //   !this.state.scrValue.includes(\".\")\n        // )\n        //   this.setState({ scrValue: this.state.scrValue + \".\" });\n        // else if (\n        //   this.checkString(this.state.scrValue.slice(0, -1)) &&\n        //   !this.state.scrValue.includes(\".\")\n        // )\n        // this.setState({ scrValue: this.state.scrValue.slice(0, -1) + \".\" });\n        // else if (\n        //\n        // this.state.scrValue.split(operators.filter(operator => this.state.scrValue.includes(operator)))[1].length > 0 &&\n        // !this.state.scrValue\n        //   .split(\n        //     operators.filter(operator =>\n        //       this.state.scrValue.includes(operator)\n        //     )\n        //   )[1]\n        //   .includes(\".\")\n        // )\n        // this.setState({\n        //   scrValue: this.state.scrValue + \".\"\n        // });\n        break;\n      }\n      case \"+\": {\n        if (this.state.scrValue.includes(\"+\"))\n          this.setState({\n            scrValue:\n              this.state.scrValue\n                .split(\"+\")\n                .reduce((a, b) => Number(a) + Number(b)) + \"+\"\n          });\n        if (this.checkString(this.state.scrValue))\n          this.setState({\n            scrValue: this.state.scrValue + e.target.value\n          });\n        else this.replacesymbol(\"+\");\n        break;\n      }\n      case \"-\": {\n        if (this.state.scrValue.includes(\"-\"))\n          this.setState({\n            scrValue:\n              this.state.scrValue\n                .split(\"-\")\n                .reduce((a, b) => Number(a) - Number(b)) + \"-\"\n          });\n        if (this.checkString(this.state.scrValue))\n          this.setState({\n            scrValue: this.state.scrValue + e.target.value\n          });\n        else this.replacesymbol(\"-\");\n        break;\n      }\n      case \"*\": {\n        if (\n          this.state.scrValue.includes(\"*\") &&\n          this.state.scrValue.split(\"*\")[1] !== \"\"\n        )\n          this.setState({\n            scrValue:\n              this.state.scrValue\n                .split(\"*\")\n                .reduce((a, b) => Number(a) * Number(b)) + \"*\"\n          });\n        if (this.checkString(this.state.scrValue))\n          this.setState({\n            scrValue: this.state.scrValue + e.target.value\n          });\n        else this.replacesymbol(\"*\");\n        break;\n      }\n      case \"/\": {\n        if (\n          this.state.scrValue.includes(\"/\") &&\n          this.state.scrValue.split(\"/\")[1] !== \"\"\n        )\n          this.setState({\n            scrValue:\n              this.state.scrValue\n                .split(\"/\")\n                .reduce((a, b) => Number(a) / Number(b)) + \"/\"\n          });\n        if (this.checkString(this.state.scrValue))\n          this.setState({\n            scrValue: this.state.scrValue + e.target.value\n          });\n        else this.replacesymbol(\"/\");\n        break;\n      }\n      case \"√\": {\n        if (this.checkString(this.state.scrValue))\n          this.setState({\n            scrValue: String(Math.sqrt(this.state.scrValue).toPrecision(4))\n          });\n        else if (this.checkString(this.state.scrValue.slice(0, -1)))\n          this.setState({\n            scrValue: String(\n              Math.sqrt(this.state.scrValue.slice(0, -1).toPrecision(4))\n            )\n          });\n        else\n          this.setState({\n            scrValue:\n              this.state.scrValue.split(\n                operators.filter(operator =>\n                  this.state.scrValue.includes(operator)\n                )\n              )[0] +\n              operators.filter(operator =>\n                this.state.scrValue.includes(operator)\n              ) +\n              String(\n                Math.sqrt(\n                  this.state.scrValue.split(\n                    operators.filter(operator =>\n                      this.state.scrValue.includes(operator)\n                    )\n                  )[1]\n                ).toPrecision(10)\n              )\n          });\n        break;\n      }\n      case \"%\": {\n        if (this.checkString(this.state.scrValue))\n          this.setState({\n            scrValue: \"0\"\n          });\n        else if (this.checkString(this.state.scrValue.slice(0, -1)))\n          this.setState({\n            scrValue:\n              this.state.scrValue +\n              String(\n                (\n                  (this.state.scrValue.slice(0, -1) *\n                    this.state.scrValue.slice(0, -1)) /\n                  100\n                ).toPrecision(6)\n              )\n          });\n        else\n          this.setState({\n            scrValue:\n              this.state.scrValue.split(\n                operators.filter(operator =>\n                  this.state.scrValue.includes(operator)\n                )\n              )[0] +\n              operators.filter(operator =>\n                this.state.scrValue.includes(operator)\n              ) +\n              String(\n                (\n                  (this.state.scrValue.split(\n                    operators.filter(operator =>\n                      this.state.scrValue.includes(operator)\n                    )\n                  )[0] *\n                    this.state.scrValue.split(\n                      operators.filter(operator =>\n                        this.state.scrValue.includes(operator)\n                      )\n                    )[1]) /\n                  100\n                ).toPrecision(10)\n              )\n          });\n        this.checklength(e);\n        break;\n      }\n      case \"=\": {\n        this.checklength(e);\n        if (this.checkString(this.state.scrValue)) break;\n        if (this.state.scrValue.slice(-1) === \".\") {\n          this.setState({\n            scrValue: this.state.scrValue.slice(0, -1)\n          });\n          break;\n        }\n        if (this.checkString(this.state.scrValue.slice(0, -1)))\n          this.setState({\n            scrValue: operations[this.state.scrValue.slice(-1)](\n              Number(this.state.scrValue.slice(0, -1)),\n              Number(this.state.scrValue.slice(0, -1))\n            )\n          });\n        else this.replacesymbol(\"\");\n        flag = true;\n        break;\n      }\n      default: {\n        //check if '0' is the initial value\n\n        this.state.scrValue === \"0\" ||\n        (flag && this.checkString(this.state.scrValue))\n          ? this.setState({\n              scrValue: e.target.value\n            })\n          : this.setState({\n              scrValue: this.state.scrValue + e.target.value\n            });\n\n        flag = false;\n        this.checklength(e);\n\n        break;\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Screen scrValue={this.state.scrValue} />{\" \"}\n        <div className=\"keypad\">\n          <div className=\"clearContainer\">\n            <Button text={\"←\"} onClick={e => this.updateScreen(e)} />{\" \"}\n            <Button text={\"C\"} onClick={e => this.updateScreen(e)} />{\" \"}\n          </div>{\" \"}\n          <div className=\"numsContainer\">\n            {\" \"}\n            {nums.map(num => (\n              <Button text={num} onClick={e => this.updateScreen(e)} />\n            ))}{\" \"}\n          </div>{\" \"}\n          <div className=\"symbsetContainer\">\n            {\" \"}\n            {symbset.map(symb => (\n              <Button text={symb} onClick={e => this.updateScreen(e)} />\n            ))}{\" \"}\n          </div>{\" \"}\n        </div>{\" \"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}