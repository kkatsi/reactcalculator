{"ast":null,"code":"import React from\"react\";import Screen from\"./Screen\";import Button from\"./Button\";import\"./styles.css\";let flag=false;const nums=Array.from(Array(10).keys()).reverse();const symbset=[\"=\",\".\",\"-\",\"+\",\"*\",\"/\",\"%\",\"√\"].reverse();const operators=[\"+\",\"-\",\"*\",\"/\"];//create 'operations' so operators and their functions can exists as variables\nconst operations={\"+\":function _(a,b){return a+b;},\"-\":function _(a,b){return a-b;},\"*\":function _(a,b){return(a*b).toPrecision(10);},\"/\":function _(a,b){return(a/b).toPrecision(10);}};class App extends React.Component{constructor(){super();this.state={scrValue:\"0\"};}checklength(e){if((this.state.scrValue+e.target.value).length>10)this.setState({scrValue:this.state.scrValue.substring(0,10)});}//tests if a string contains only integer of float numbers\ncheckString(value){if(/^\\d+\\.\\d+$/.test(value)||/^\\d+$/.test(value))return true;else return false;}//manipulates the situation when 2 operators goes together in the screen.\nreplacesymbol(symb){// if there is an operator at the end of the string and the rest is a number,\n// then the prexisted operator is replaced by the new operator clicked by user.\nif(this.checkString(this.state.scrValue.slice(0,-1)))this.setState({scrValue:this.state.scrValue.slice(0,-1)+symb});//else means that there is already an operator between 2 numbers in the screen and a second\n//one comes in. The first in place operation completes and the sybmol of the\n//new operation is added at the end of the result.\nelse{this.setState({scrValue://operations object has every possible operation, so we specify the operator\n//by filtering operators array with the operator that is already included in\n//the screen string and the 2 numbers needed for the operation are being given\noperations[//getting the operator that exist in the string\noperators.filter(operator=>this.state.scrValue.includes(operator))](//transform string to number\nNumber(//getting the first part of the string, the one before operator\nthis.state.scrValue.split(operators.filter(operator=>this.state.scrValue.includes(operator)))[0]),//transform string to number\nNumber(//getting the second part of the string, the one after operator\nthis.state.scrValue.split(operators.filter(operator=>this.state.scrValue.includes(operator)))[1]))+symb//adding the symbol of the new operation at the end\n});}}updateScreen(e){switch(e.target.value){case\"C\":{this.setState({scrValue:\"0\"});break;}case\"←\":{//check the length of screen value\nif(this.state.scrValue.length>1)this.setState({scrValue:this.state.scrValue.slice(0,-1),symb:null});else this.setState({scrValue:\"0\"});break;}case\".\":{if(this.checkString(this.state.scrValue)&&!this.state.scrValue.includes(\".\"))this.setState({scrValue:this.state.scrValue+\".\"});else if(this.checkString(this.state.scrValue.slice(0,-1))&&!this.state.scrValue.includes(\".\"))this.setState({scrValue:this.state.scrValue.slice(0,-1)+\".\"});else if(this.state.scrValue.split(operators.filter(operator=>this.state.scrValue.includes(operator)))[1].length>0&&!this.state.scrValue.split(operators.filter(operator=>this.state.scrValue.includes(operator)))[1].includes(\".\"))this.setState({scrValue:this.state.scrValue+\".\"});break;}case\"+\":{if(this.state.scrValue.includes(\"+\"))this.setState({scrValue:this.state.scrValue.split(\"+\").reduce((a,b)=>Number(a)+Number(b))+\"+\"});if(this.checkString(this.state.scrValue))this.setState({scrValue:this.state.scrValue+e.target.value});else this.replacesymbol(\"+\");break;}case\"-\":{if(this.state.scrValue.includes(\"-\"))this.setState({scrValue:this.state.scrValue.split(\"-\").reduce((a,b)=>Number(a)-Number(b))+\"-\"});if(this.checkString(this.state.scrValue))this.setState({scrValue:this.state.scrValue+e.target.value});else this.replacesymbol(\"-\");break;}case\"*\":{if(this.state.scrValue.includes(\"*\")&&this.state.scrValue.split(\"*\")[1]!==\"\")this.setState({scrValue:this.state.scrValue.split(\"*\").reduce((a,b)=>Number(a)*Number(b))+\"*\"});if(this.checkString(this.state.scrValue))this.setState({scrValue:this.state.scrValue+e.target.value});else this.replacesymbol(\"*\");break;}case\"/\":{if(this.state.scrValue.includes(\"/\")&&this.state.scrValue.split(\"/\")[1]!==\"\")this.setState({scrValue:this.state.scrValue.split(\"/\").reduce((a,b)=>Number(a)/Number(b))+\"/\"});if(this.checkString(this.state.scrValue))this.setState({scrValue:this.state.scrValue+e.target.value});else this.replacesymbol(\"/\");break;}case\"√\":{if(this.checkString(this.state.scrValue))this.setState({scrValue:String(Math.sqrt(this.state.scrValue).toPrecision(4))});else if(this.checkString(this.state.scrValue.slice(0,-1)))this.setState({scrValue:String(Math.sqrt(this.state.scrValue.slice(0,-1).toPrecision(4)))});else this.setState({scrValue:this.state.scrValue.split(operators.filter(operator=>this.state.scrValue.includes(operator)))[0]+operators.filter(operator=>this.state.scrValue.includes(operator))+String(Math.sqrt(this.state.scrValue.split(operators.filter(operator=>this.state.scrValue.includes(operator)))[1]).toPrecision(10))});break;}case\"%\":{if(this.checkString(this.state.scrValue))this.setState({scrValue:\"0\"});else if(this.checkString(this.state.scrValue.slice(0,-1)))this.setState({scrValue:this.state.scrValue+String((this.state.scrValue.slice(0,-1)*this.state.scrValue.slice(0,-1)/100).toPrecision(6))});else this.setState({scrValue:this.state.scrValue.split(operators.filter(operator=>this.state.scrValue.includes(operator)))[0]+operators.filter(operator=>this.state.scrValue.includes(operator))+String((this.state.scrValue.split(operators.filter(operator=>this.state.scrValue.includes(operator)))[0]*this.state.scrValue.split(operators.filter(operator=>this.state.scrValue.includes(operator)))[1]/100).toPrecision(10))});this.checklength(e);break;}case\"=\":{this.checklength(e);if(this.checkString(this.state.scrValue))break;if(this.state.scrValue.slice(-1)===\".\"){this.setState({scrValue:this.state.scrValue.slice(0,-1)});break;}if(this.checkString(this.state.scrValue.slice(0,-1)))this.setState({scrValue:operations[this.state.scrValue.slice(-1)](Number(this.state.scrValue.slice(0,-1)),Number(this.state.scrValue.slice(0,-1)))});else this.replacesymbol(\"\");flag=true;break;}default:{//check if '0' is the initial value\nthis.state.scrValue===\"0\"||flag&&this.checkString(this.state.scrValue)?this.setState({scrValue:e.target.value}):this.setState({scrValue:this.state.scrValue+e.target.value});flag=false;this.checklength(e);break;}}}render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"App\"},/*#__PURE__*/React.createElement(Screen,{scrValue:this.state.scrValue}),/*#__PURE__*/React.createElement(\"div\",{className:\"keypad\"},/*#__PURE__*/React.createElement(\"div\",{className:\"clearContainer\"},/*#__PURE__*/React.createElement(Button,{text:\"←\",onClick:e=>this.updateScreen(e)}),/*#__PURE__*/React.createElement(Button,{text:\"C\",onClick:e=>this.updateScreen(e)})),/*#__PURE__*/React.createElement(\"div\",{className:\"numsContainer\"},nums.map(num=>/*#__PURE__*/React.createElement(Button,{text:num,onClick:e=>this.updateScreen(e)}))),/*#__PURE__*/React.createElement(\"div\",{className:\"symbsetContainer\"},symbset.map(symb=>/*#__PURE__*/React.createElement(Button,{text:symb,onClick:e=>this.updateScreen(e)})))));}}export default App;","map":{"version":3,"sources":["C:/React/reactcalculator/src/App.js"],"names":["React","Screen","Button","flag","nums","Array","from","keys","reverse","symbset","operators","operations","a","b","toPrecision","App","Component","constructor","state","scrValue","checklength","e","target","value","length","setState","substring","checkString","test","replacesymbol","symb","slice","filter","operator","includes","Number","split","updateScreen","reduce","String","Math","sqrt","render","map","num"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Screen from \"./Screen\";\nimport Button from \"./Button\";\nimport \"./styles.css\";\n\nlet flag = false;\nconst nums = Array.from(Array(10).keys()).reverse();\nconst symbset = [\"=\", \".\", \"-\", \"+\", \"*\", \"/\", \"%\", \"√\"].reverse();\nconst operators = [\"+\", \"-\", \"*\", \"/\"];\n//create 'operations' so operators and their functions can exists as variables\nconst operations = {\n  \"+\": function(a, b) {\n    return a + b;\n  },\n  \"-\": function(a, b) {\n    return a - b;\n  },\n  \"*\": function(a, b) {\n    return (a * b).toPrecision(10);\n  },\n  \"/\": function(a, b) {\n    return (a / b).toPrecision(10);\n  }\n};\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      scrValue: \"0\"\n    };\n  }\n\n  checklength(e){\n    if((this.state.scrValue + e.target.value).length>10)\n      this.setState({scrValue: this.state.scrValue.substring(0,10)});\n  }\n\n  //tests if a string contains only integer of float numbers\n  checkString(value) {\n    if (/^\\d+\\.\\d+$/.test(value) || /^\\d+$/.test(value)) return true;\n    else return false;\n  }\n\n  //manipulates the situation when 2 operators goes together in the screen.\n  replacesymbol(symb) {\n    // if there is an operator at the end of the string and the rest is a number,\n    // then the prexisted operator is replaced by the new operator clicked by user.\n    if (this.checkString(this.state.scrValue.slice(0, -1)))\n      this.setState({ scrValue: this.state.scrValue.slice(0, -1) + symb });\n    //else means that there is already an operator between 2 numbers in the screen and a second\n    //one comes in. The first in place operation completes and the sybmol of the\n    //new operation is added at the end of the result.\n    else {\n      this.setState({\n        scrValue:\n          //operations object has every possible operation, so we specify the operator\n          //by filtering operators array with the operator that is already included in\n          //the screen string and the 2 numbers needed for the operation are being given\n          operations[\n            //getting the operator that exist in the string\n            operators.filter(operator => this.state.scrValue.includes(operator))\n          ](\n            //transform string to number\n            Number(\n              //getting the first part of the string, the one before operator\n              this.state.scrValue.split(\n                operators.filter(operator =>\n                  this.state.scrValue.includes(operator)\n                )\n              )[0]\n            ),\n            //transform string to number\n            Number(\n              //getting the second part of the string, the one after operator\n              this.state.scrValue.split(\n                operators.filter(operator =>\n                  this.state.scrValue.includes(operator)\n                )\n              )[1]\n            )\n          ) + symb //adding the symbol of the new operation at the end\n      });\n    }\n  }\n\n  updateScreen(e) {\n\n    switch (e.target.value) {\n      case \"C\": {\n        this.setState({ scrValue: \"0\" });\n        break;\n      }\n      case \"←\": {\n        //check the length of screen value\n        if (this.state.scrValue.length > 1)\n          this.setState({\n            scrValue: this.state.scrValue.slice(0, -1),\n            symb: null\n          });\n        else this.setState({ scrValue: \"0\" });\n        break;\n      }\n      case \".\": {\n        if (\n          this.checkString(this.state.scrValue) &&\n          !this.state.scrValue.includes(\".\")\n        )\n          this.setState({ scrValue: this.state.scrValue + \".\" });\n        else if (\n          this.checkString(this.state.scrValue.slice(0, -1)) &&\n          !this.state.scrValue.includes(\".\")\n        )\n          this.setState({ scrValue: this.state.scrValue.slice(0, -1) + \".\" });\n        else if (\n          this.state.scrValue.split(\n            operators.filter(operator => this.state.scrValue.includes(operator))\n          )[1].length > 0 &&\n          !this.state.scrValue\n            .split(\n              operators.filter(operator =>\n                this.state.scrValue.includes(operator)\n              )\n            )[1]\n            .includes(\".\")\n        )\n          this.setState({\n            scrValue: this.state.scrValue + \".\"\n          });\n        break;\n      }\n      case \"+\": {\n        if (this.state.scrValue.includes(\"+\"))\n          this.setState({\n            scrValue:\n              this.state.scrValue\n                .split(\"+\")\n                .reduce((a, b) => Number(a) + Number(b)) + \"+\"\n          });\n        if (this.checkString(this.state.scrValue))\n          this.setState({ scrValue: this.state.scrValue + e.target.value });\n        else this.replacesymbol(\"+\");\n        break;\n      }\n      case \"-\": {\n        if (this.state.scrValue.includes(\"-\"))\n          this.setState({\n            scrValue:\n              this.state.scrValue\n                .split(\"-\")\n                .reduce((a, b) => Number(a) - Number(b)) + \"-\"\n          });\n        if (this.checkString(this.state.scrValue))\n          this.setState({ scrValue: this.state.scrValue + e.target.value });\n        else this.replacesymbol(\"-\");\n        break;\n      }\n      case \"*\": {\n        if (\n          this.state.scrValue.includes(\"*\") &&\n          this.state.scrValue.split(\"*\")[1] !== \"\"\n        )\n          this.setState({\n            scrValue:\n              this.state.scrValue\n                .split(\"*\")\n                .reduce((a, b) => Number(a) * Number(b)) + \"*\"\n          });\n        if (this.checkString(this.state.scrValue))\n          this.setState({ scrValue: this.state.scrValue + e.target.value });\n        else this.replacesymbol(\"*\");\n        break;\n      }\n      case \"/\": {\n        if (\n          this.state.scrValue.includes(\"/\") &&\n          this.state.scrValue.split(\"/\")[1] !== \"\"\n        )\n          this.setState({\n            scrValue:\n              this.state.scrValue\n                .split(\"/\")\n                .reduce((a, b) => Number(a) / Number(b)) + \"/\"\n          });\n        if (this.checkString(this.state.scrValue))\n          this.setState({ scrValue: this.state.scrValue + e.target.value });\n        else this.replacesymbol(\"/\");\n        break;\n      }\n      case \"√\": {\n        if (this.checkString(this.state.scrValue))\n          this.setState({ scrValue: String(Math.sqrt(this.state.scrValue).toPrecision(4)) });\n        else if (this.checkString(this.state.scrValue.slice(0, -1)))\n          this.setState({\n            scrValue: String(Math.sqrt(this.state.scrValue.slice(0, -1).toPrecision(4)))\n          });\n        else\n          this.setState({\n            scrValue:\n              this.state.scrValue.split(\n                operators.filter(operator =>\n                  this.state.scrValue.includes(operator)\n                )\n              )[0] +\n              operators.filter(operator =>\n                this.state.scrValue.includes(operator)\n              ) +\n              String(\n                Math.sqrt(\n                  this.state.scrValue.split(\n                    operators.filter(operator =>\n                      this.state.scrValue.includes(operator)\n                    )\n                  )[1]\n                ).toPrecision(10)\n              )\n          });\n        break;\n      }\n      case \"%\": {\n\n        if (this.checkString(this.state.scrValue))\n          this.setState({ scrValue: \"0\" });\n        else if (this.checkString(this.state.scrValue.slice(0, -1)))\n          this.setState({\n            scrValue:\n              this.state.scrValue +\n              String(\n                ((this.state.scrValue.slice(0, -1) *\n                  this.state.scrValue.slice(0, -1)) /\n                  100).toPrecision(6)\n              )\n          });\n        else\n          this.setState({\n            scrValue:\n              this.state.scrValue.split(\n                operators.filter(operator =>\n                  this.state.scrValue.includes(operator)\n                )\n              )[0] +\n              operators.filter(operator =>\n                this.state.scrValue.includes(operator)\n              ) +\n              String(\n                ((this.state.scrValue.split(\n                  operators.filter(operator =>\n                    this.state.scrValue.includes(operator)\n                  )\n                )[0] *\n                  this.state.scrValue.split(\n                    operators.filter(operator =>\n                      this.state.scrValue.includes(operator)\n                    )\n                  )[1]) /\n                  100).toPrecision(10)\n              )\n          });\n          this.checklength(e);\n        break;\n      }\n      case \"=\": {\n        this.checklength(e);\n        if (this.checkString(this.state.scrValue)) break;\n        if (this.state.scrValue.slice(-1) === \".\") {\n          this.setState({ scrValue: this.state.scrValue.slice(0, -1) });\n          break;\n        }\n        if (this.checkString(this.state.scrValue.slice(0, -1)))\n          this.setState({\n            scrValue: operations[this.state.scrValue.slice(-1)](\n              Number(this.state.scrValue.slice(0, -1)),\n              Number(this.state.scrValue.slice(0, -1))\n            )\n          });\n        else this.replacesymbol(\"\");\n        flag = true;\n        break;\n      }\n      default: {\n        //check if '0' is the initial value\n\n        this.state.scrValue === \"0\" ||\n        (flag && this.checkString(this.state.scrValue))\n          ? this.setState({ scrValue: e.target.value })\n          : this.setState({ scrValue: this.state.scrValue + e.target.value });\n\n        flag = false;\n        this.checklength(e);\n\n\n        break;\n      }\n    }\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Screen scrValue={this.state.scrValue} />\n        <div className=\"keypad\">\n          <div className=\"clearContainer\">\n            <Button text={\"←\"} onClick={e => this.updateScreen(e)} />\n            <Button text={\"C\"} onClick={e => this.updateScreen(e)} />\n          </div>\n          <div className=\"numsContainer\">\n            {nums.map(num => (\n              <Button text={num} onClick={e => this.updateScreen(e)} />\n            ))}\n          </div>\n          <div className=\"symbsetContainer\">\n            {symbset.map(symb => (\n              <Button text={symb} onClick={e => this.updateScreen(e)} />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}